// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    content   String
    imageId   String?
    authorId  String
    likes     Like[]
    comments  Comment[]
}

model Like {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    userId    String

    @@index([postId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    postId    Int
    userId    String
    Post      Post     @relation(fields: [postId], references: [id])

    @@index([postId])
}

model Follow {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    followerId  String
    followingId String

    @@unique([followerId, followingId])
}

model Message {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    content    String
    senderId   String
    receiverId String
    read       Boolean  @default(false)

    @@index([senderId, receiverId])
}

model Notification {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      String
    userId    String // the user who will receive the notification
    postId    Int? // the post that triggered the notification
    commentId Int? // the comment that triggered the notification
    userId2   String? // the user who triggered the notification
    read      Boolean  @default(false)

    @@index([userId])
}

model Bio {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    userId    String
}
