// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id              String   @id
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    username        String   @unique
    email           String   @unique
    profileImageUrl String
    firstName       String?
    lastName        String?
    bio             String?

    posts     Post[]    @relation("UserPosts")
    likes     Like[]    @relation("UserLikes")
    comments  Comment[] @relation("UserComments")
    follows   Follow[]  @relation("Following")
    followers Follow[]  @relation("Followers")

    chats        Chat[]    @relation("ChatParticipants")
    sentMessages Message[] @relation("ChatSender")
}

model Post {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    content   String    @db.VarChar(500)
    imageId   String?
    likes     Like[]    @relation("PostLikes")
    comments  Comment[] @relation("PostComments")
    author    User      @relation("UserPosts", fields: [authorId], references: [id])
    authorId  String
}

model Like {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    postId    Int
    post      Post     @relation("PostLikes", fields: [postId], references: [id])
    userId    String
    user      User     @relation("UserLikes", fields: [userId], references: [id])

    @@index([postId])
    @@index([userId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    user      User     @relation("UserComments", fields: [userId], references: [id])
    post      Post     @relation("PostComments", fields: [postId], references: [id])
    userId    String
    postId    Int

    @@index([postId])
}

model Follow {
    id          Int      @id @default(autoincrement())
    follower    User     @relation("Followers", fields: [followerId], references: [id])
    followerId  String
    following   User     @relation("Following", fields: [followingId], references: [id])
    followingId String
    createdAt   DateTime @default(now())

    @@unique([followerId, followingId])
}

model Message {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    read      Boolean  @default(false)

    sender   User   @relation("ChatSender", fields: [senderId], references: [id])
    senderId String

    chat   Chat? @relation("ChatMessages", fields: [chatId], references: [id])
    chatId Int?

    @@index([chatId])
}

model Notification {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      String
    userId    String // the user who will receive the notification
    postId    Int? // the post that triggered the notification
    commentId Int? // the comment that triggered the notification
    userId2   String? // the user who triggered the notification

    read Boolean @default(false)
}

model Chat {
    id           Int       @id @default(autoincrement())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    name         String?
    isGroupChat  Boolean   @default(false)
    participants User[]    @relation("ChatParticipants")
    messages     Message[] @relation("ChatMessages")
}
